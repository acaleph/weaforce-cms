package com.weaforce.core.web.page;

import java.util.Collections;
import java.util.List;

import org.springframework.util.StringUtils;

import com.weaforce.core.util.Global;

/**
 * This is a pure page POJO for page navigation bar, all parameters value
 * generated by page context
 * 
 * @author yanjiacheng
 * 
 * @param <T>
 */
public class Page<T> {
	private int pageSize = 0; // Number of elements on every page
	private boolean hasPreviousPage; // If has previous page
	private boolean hasNextPage; // If has next page
	private int currentPage; // Current page number
	private int totalPages;
	private String pagination; // Page navigation bar
	private int numberOfElements;
	private long totalElements;
	private String searchParams = "";
	private String href = "<li><a href=\"?page=${NUMBER}${SEARCH_PARAMS}\">${NUMBER}</a></li>"; 
	private List<T> content; // Content of elements currently on this page
	private IPageContext<T> pageContext; // Page context

	public Page() {
		this.pageSize = Global.PAGE_SIZE;
	}

	public Page(int currentPage, int pageSize) {
		this.currentPage = currentPage;
		this.pageSize = pageSize == 0 ? Global.PAGE_SIZE : pageSize;
		this.href = StringUtils.replace(href, "${SEARCH_PARAMS}", "");
	}

	public Page(int currentPage,int pageSize, String searchParams) {
		this.currentPage = currentPage;
		this.pageSize = pageSize == 0 ? Global.PAGE_SIZE : pageSize;
		this.searchParams = "&" + searchParams;
		this.href = StringUtils.replace(href, "${SEARCH_PARAMS}", this.searchParams);
	}

	public int getPageSize() {
		return this.pageSize;
	}

	/**
	 * Set the page size from the client
	 * 
	 * @param pageSize
	 */
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public boolean hasPreviousPage() {
		return hasPreviousPage;
	}

	public void hasPreviousPage(boolean hasPreviousPage) {
		this.hasPreviousPage = hasPreviousPage;
	}

	public boolean hasNextPage() {
		return hasNextPage;
	}

	public void hasNextPage(boolean hasNextPage) {
		this.hasNextPage = hasNextPage;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public int getTotalPages() {
		return totalPages;
	}

	public void setTotalPages(int totalPages) {
		this.totalPages = totalPages;
	}

	public String getPagination() {
		return pagination;
	}

	public void setPagination(String pagination) {
		this.pagination = pagination;
	}

	/**
	 * Get the elements currently on this page
	 * 
	 * @return The elements currently on this page
	 */
	public List<T> getContent() {
		return this.content == null ? Collections.<T> emptyList()
				: this.content;
	}

	public void setContent(List<T> content) {
		this.content = content;
	}

	public IPageContext<T> getPageContext() {
		return pageContext;
	}

	public void setPageContext(IPageContext<T> pageContext) {
		this.pageContext = pageContext;
	}

	/**
	 * Returns the number of elements currently on this page.
	 * 
	 * @return the number of elements currently on this page
	 */
	public int getNumberOfElements() {
		return this.numberOfElements;
	}

	/**
	 * Returns the total amount of elements.
	 * 
	 * @return the total amount of elements
	 */
	public long getTotalElements() {
		return this.totalElements;
	}

	/**
	 * Set the number of elements currently on this page
	 * 
	 * @param numberOfElements
	 *            The number of elements currently on this page
	 */
	public void setNumberOfElements(int numberOfElements) {
		this.numberOfElements = numberOfElements;
	}

	/**
	 * Set the total amount of elements
	 * 
	 * @param totalElements
	 *            ã€€The total amount of elements
	 */

	public void setTotalElements(long totalElements) {
		this.totalElements = totalElements;
	}

	public String getHref() {
		return href;
	}

	public void setHref(String href) {
		this.href = href;
	}

	public String getSearchParams() {
		return searchParams;
	}

	public void setSearchParams(String searchParams) {
		this.searchParams = searchParams;
	}

}
